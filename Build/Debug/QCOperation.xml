<?xml version="1.0"?>
<doc>
<assembly>
<name>
QCOperation
</name>
</assembly>
<members>
<member name="M:AutoTestComponent.QCInformation.SetTestInstanceSummary(TDAPIOLELib.TDConnection,System.String,System.String,System.String)">
	<summary>
 Write the test instance summary information
 <para>Such as NumOfPass and NumOfTotal</para>
	</summary>
	<param name="TdConn">TDConnection TdConn, should be using OTA initial the connection</param>
	<param name="Id">String Id, Test Instance's id value</param>
	<param name="FieldName">String FieldName, The field you want to add value</param>
	<param name="FieldValue">String FieldValue, The value you want to add field</param>
	<returns>The return is Ture or False</returns>
	<remarks></remarks>
</member><member name="M:AutoTestComponent.QCInformation.SetTestRunStatus(TDAPIOLELib.TDConnection,System.String,System.String)">
	<summary>
 Add the test run of status to a related test instance
 <para>It will be shown as Pass or Fail</para>
	</summary>
	<param name="TdConn">TDConnection TdConn, should be using OTA initial the connection</param>
	<param name="Id">String Id, Test RUN's id value</param>
	<param name="Status">String Status, Which you want to set status to QC in this test run
 <para>it can be only given as: "Not Completed","Passed","Failed","N/A", and other value will be assign to "No Run" </para></param>
	<returns>The return is Ture or False</returns>
	<remarks></remarks>
</member><member name="M:AutoTestComponent.QCInformation.SetTestRunStep(TDAPIOLELib.TDConnection,System.String,System.String,System.String)">
	<summary>
 Add the test steps to test run
 <para>You can add steps as you want</para>
	</summary>
	<param name="TdConn">TDConnection TdConn, should be using OTA initial the connection</param>
	<param name="Id">String Id, Test RUN's id value</param>
	<param name="StepName">String StepName, The name of step you can set</param>
	<param name="StepStatus">String StepStatus, The status of step you set
 <para>it can be only given as: "Not Completed","Passed","Failed","N/A", and other value will be assign to "No Run" </para></param>
	<returns>The return is Ture or False</returns>
	<remarks></remarks>
</member><member name="T:AutoTestComponent.QCInformation">
	<summary>
 QCInformation can provide the function of write information to QC, such as Test Run Step, Test Run Summary
 </summary>
	<remarks>
 Sample:
 <para>TSTest instance;</para>
		<para>//generate the run first</para>
		<para>RunFactory runFact = instance.RunFactory as RunFactory;</para>
		<para>DateTime now = TestUtility.GetCurrentTime();</para>
		<para>Run instanceRun = runFact.AddItem("Run_" + now.ToShortDateString() +</para>
		<para>"_" + now.ToShortTimeString()) as Run;</para>
		<para>QCOperation.QCInformation info = new QCOperation.QCInformation();</para>
		<para>string runID = instanceRun.ID as string;</para>
		<para>//Initial the start status</para>
		<para>info.SetTestRunStatus(tdConn, runID, "Not Completed");</para>
		<para>//Add the run steps</para>
		<para>info.SetTestRunStep(tdConn, runID, "Step 1", "Passed");</para>
		<para>info.SetTestRunStep(tdConn, runID, "Step 2", "Failed");</para>
		<para>//Update the end status</para>
		<para>info.SetTestRunStatus(tdConn, runID, "Failed");</para>
		<para>//When finish the test, record the summary in instance of testset</para>
		<para>string instanceID = instance.ID as string;</para>
		<para>info.SetTestInstanceSummary(tdConn, instanceID, "TC_USER_02", "01");</para>
		<para>info.SetTestInstanceSummary(tdConn, instanceID, "TC_USER_03", "02");</para>
	</remarks>
</member><member name="P:AutoTestComponent.My.Resources.Resources.ResourceManager">
	<summary>
  Returns the cached ResourceManager instance used by this class.
</summary>
</member><member name="P:AutoTestComponent.My.Resources.Resources.Culture">
	<summary>
  Overrides the current thread's CurrentUICulture property for all
  resource lookups using this strongly typed resource class.
</summary>
</member><member name="T:AutoTestComponent.My.Resources.Resources">
	<summary>
  A strongly-typed resource class, for looking up localized strings, etc.
</summary>
</member><member name="M:AutoTestComponent.QCAttachment.UploadAttachment(TDAPIOLELib.TDConnection,System.String,System.String,System.String,System.String)">
	<summary>
 Upload attachment to QC
 <para>Only implement the RUN and TEST type</para>
	</summary>
	<param name="TdConn">TDConnection TdConn, should be using OTA initial the connection</param>
	<param name="Type">String Type, It's value can be TEST, RUN, STEP or others</param>
	<param name="Id">String Id, Match Type's id value</param>
	<param name="FileName">String FileName, The file name you want to upload</param>
	<param name="UploadPath">String UploadPath, The local path which your upload file located</param>
	<returns>The return is Ture or False</returns>
	<remarks></remarks>
</member><member name="M:AutoTestComponent.QCAttachment.DownloadAttachment(TDAPIOLELib.TDConnection,System.String,System.String,System.String,System.String)">
	<summary>
 Download attachment from QC
 <para>Only implement the TEST type</para>
	</summary>
	<param name="TdConn">TDConnection TdConn, should be using OTA initial the connection</param>
	<param name="Type">String Type, It's value can be TEST, RUN, STEP or others</param>
	<param name="Id">String Id, Match Type's id value</param>
	<param name="FileName">String FileName, The file name you want to download</param>
	<param name="DownloadPath">String DownloadPath, The local path that you want to save the file(s)</param>
	<returns>StringArray, the download file(s) local path array </returns>
	<remarks></remarks>
</member><member name="T:AutoTestComponent.QCAttachment">
	<summary>
 QCAttachment can provide the function of Download and Upload file(s) from QC
 <para>If the project control by version, the update test attachment will be failure </para>
	</summary>
	<remarks>
 Sample:
<para>QCOperation.QCAttachment taa = new QCOperation.QCAttachment();</para>
		<para>ArrayList attachments = new ArrayList();</para>
		<para>bool upSuccess;</para>
		<para>//attachments will save the download files path</para>
		<para>//Download</para>
		<para>//Type value: it can be TEST, RUN, STEP or others</para>
		<para>//Id value: TEST's id, RUN's id , and so on</para>
		<para>//Specific file full name or wildcard with extention name</para>
		<para>//File out put path</para>
		<para>attachments = (ArrayList)taa.DownloadAttachment(qcOnline.getTDConn(), "Test", "1406", "Query_1406.xml", "C:\\temp");</para>
		<para>attachments = (ArrayList)taa.DownloadAttachment(qcOnline.getTDConn(), "Test", "1406", "*.JPG", "C:\\temp");</para>
		<para>//Upload</para>
		<para>upSuccess = (bool)taa.UploadAttachment(qcOnline.getTDConn(), "RUN", "1406", "test.cs", "C:\\temp");</para>
	</remarks>
</member>
</members>
</doc>